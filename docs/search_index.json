[["index.html", "YOUR TITLE HERE Chapter 1 Introduction", " YOUR TITLE HERE Barbara Bettencourt, Gregor Hanuschak, Zicheng Huang 2021-04-05 Chapter 1 Introduction APBA (American Professional Baseball Association) baseball is a baseball board game that has been played by hardcore baseball fans by decades. It touts itself as being extremely accurate and true-to-life. APBA makes cards for every major league baseball player for every season of major league baseball. These cards are based on real life statistics. You play the game by rolling dice and looking at the result on the cards (simplified description of the game). The game is accurate enough that adjustments are even made based on the particular baseball stadium you choose to play in (so similar numbers of homeruns should occur in each ballpark in the game as they do in real life). We have access to many scorecards of data from many times the board game was played (scorecards include how many at-bats players had in the game, how many hits they had, how many runs that pitchers gave up, etc.) Our project idea is to compare statistics of how players do in the game versus how they did in real life. As a simple example, if a player had 300 at-bats, and had 100 hits in real life then you would expect that the same player would have 50 hits in the game if he had 150 at-bats. We will see how close to reality the modeling actually is in APBA baseball. "],["data-sources.html", "Chapter 2 Data sources", " Chapter 2 Data sources Our data sources are www.baseball-reference.com for the real-life statistics and approximately 100 games of scoresheets from APBA Baseball. In order to extract the data needed from Baseball Reference, we performed web scraping to pull the batting and pitching data in the year 1998 for the players that appear in the 100 games of APBA Baseball. These packages are required. First, we check if it is allowed to scrape the Baseball Reference website. paths_allowed(&#39;https://www.baseball-reference.com&#39;) ## [1] TRUE We can scrape the data from the row of Year 1998 of the Standard Batting table on the website for each individual player. For example, the batting for Derek Jeter can be found at https://www.baseball-reference.com/players/j/jeterde01.shtml. The entire list of players can be found in the . ## obtain batting data for players who only do batting players_batting &lt;- read_csv(&#39;data/players_list/players_batting_only.csv&#39;) n &lt;- nrow(players_batting) df_batting_only = data.frame() for (i in 1:n){ url &lt;- paste(&#39;https://www.baseball-reference.com/players/&#39;, substr(players_batting$playerID[i], 1, 1), &#39;/&#39;, players_batting$playerID[i], &#39;.shtml&#39;, sep = &#39;&#39;) # paths_allowed(url) ## creating variables web &lt;- read_html(url) name &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;meta&quot;]/div[2]/h1/span&#39;) %&gt;% html_text() hits &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;meta&quot;]/div[2]/p[2]&#39;) %&gt;% html_text() %&gt;% str_extract(regex(&#39;Bats:.*&#39;)) %&gt;% str_remove_all(&#39;Bats: &#39;) columns &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;batting_standard.1998&quot;]/td&#39;) %&gt;% html_attr(&#39;data-stat&#39;) values &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;batting_standard.1998&quot;]/td&#39;) %&gt;% html_text() df &lt;- data.frame(columns, values) df[&#39;playerID&#39;] &lt;- players_batting$playerID[i] df[&#39;name&#39;] &lt;- name df[&#39;hits&#39;] &lt;- hits df &lt;- pivot_wider(df, names_from = columns, values_from = values) df_batting_only = rbind(df_batting_only, df) } ## obtain batting data for players who do both batting and pitching players_batting &lt;- read_csv(&#39;data/players_list/players_batting_pitching.csv&#39;) n &lt;- nrow(players_batting) df_batting_pitching = data.frame() for (i in 1:n){ url &lt;- paste(&#39;https://www.baseball-reference.com/players/&#39;, substr(players_batting$playerID[i], 1, 1), &#39;/&#39;, players_batting$playerID[i], &#39;.shtml&#39;, sep = &#39;&#39;) # paths_allowed(url) web &lt;- read_html(url) ## creating variables name &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;meta&quot;]/div[2]/h1/span&#39;) %&gt;% html_text() hits &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;meta&quot;]/div[2]/p[2]&#39;) %&gt;% html_text() %&gt;% str_extract(regex(&#39;Bats:.*&#39;)) %&gt;% str_remove_all(&#39;Bats: &#39;) columns &lt;- web %&gt;% html_nodes(xpath = &#39;//comment()&#39;) %&gt;% html_text() %&gt;% # extract comment text paste(collapse = &#39;&#39;) %&gt;% # collapse to a single string read_html() %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;batting_standard.1998&quot;]/td&#39;) %&gt;% html_attr(&#39;data-stat&#39;) values &lt;- web %&gt;% html_nodes(xpath = &#39;//comment()&#39;) %&gt;% html_text() %&gt;% # extract comment text paste(collapse = &#39;&#39;) %&gt;% # collapse to a single string read_html() %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;batting_standard.1998&quot;]/td&#39;) %&gt;% html_text() df &lt;- data.frame(columns, values) df[&#39;playerID&#39;] &lt;- players_batting$playerID[i] df[&#39;name&#39;] &lt;- name df[&#39;hits&#39;] &lt;- hits df &lt;- pivot_wider(df, names_from = columns, values_from = values) df_batting_pitching = rbind(df_batting_pitching, df) } ## combine bating data df_batting = rbind(df_batting_only, df_batting_pitching) i &lt;- 7:30 df_batting[, i] &lt;- sapply(df_batting[, i], as.numeric) # convert the accented characters to unaccented ones df_batting$name &lt;- iconv(df_batting$name, from=&#39;UTF-8&#39;, to=&#39;ASCII//TRANSLIT&#39;) #create file #write_csv(df_batting, &#39;data/raw/data_batting_raw.csv&#39;) ## obtain pitching data players_pitching &lt;- read_csv(&#39;data/players_list/players_pitching.csv&#39;) n &lt;- nrow(players_pitching) df_pitching = data.frame() for (i in 1:n){ url &lt;- paste(&#39;https://www.baseball-reference.com/players/&#39;, substr(players_pitching$playerID[i], 1, 1), &#39;/&#39;, players_pitching$playerID[i], &#39;.shtml&#39;, sep = &#39;&#39;) # paths_allowed(url) web &lt;- read_html(url) ## creating variables name &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;meta&quot;]/div[2]/h1/span&#39;) %&gt;% html_text() throws &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;meta&quot;]/div[2]/p[2]&#39;) %&gt;% html_text() %&gt;% str_extract(regex(&#39;Throws:.*&#39;)) %&gt;% str_remove_all(&#39;Throws: &#39;) columns &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;pitching_standard.1998&quot;]/td&#39;) %&gt;% html_attr(&#39;data-stat&#39;) values &lt;- web %&gt;% html_nodes(xpath = &#39;//*[@id=&quot;pitching_standard.1998&quot;]/td&#39;) %&gt;% html_text() df &lt;- data.frame(columns, values) df[&#39;playerID&#39;] &lt;- players_pitching$playerID[i] df[&#39;name&#39;] &lt;- name df[&#39;throws&#39;] &lt;- throws df &lt;- pivot_wider(df, names_from = columns, values_from = values) df_pitching = rbind(df_pitching, df) } i &lt;- 7:36 df_pitching[, i] &lt;- sapply(df_pitching[, i], as.numeric) # convert the accented characters to unaccented ones df_pitching$name &lt;- iconv(df_pitching$name, from=&#39;UTF-8&#39;, to=&#39;ASCII//TRANSLIT&#39;) #create file #write_csv(df_pitching, &#39;data/raw/data_pitching_raw.csv&#39;) We save the raw real-life batting and pitching data in the . "],["data-transformation.html", "Chapter 3 Data transformation", " Chapter 3 Data transformation library(tidyverse) # for working with data frames ## read in raw data scraped from web df_batting &lt;- read_csv(&#39;data/raw/data_batting_raw.csv&#39;) df_pitching &lt;- read_csv(&#39;data/raw/data_pitching_raw.csv&#39;) ## batting data clean up df_batting[&#39;AVG&#39;] &lt;- df_batting$H/df_batting$AB df_batting[&#39;SLG&#39;] &lt;- (df_batting$H-df_batting$`2B`-df_batting$`3B`-df_batting$HR+2*df_batting$`2B`+3*df_batting$`3B`+4*df_batting$HR)/df_batting$AB df_batting[&#39;OBA&#39;] &lt;- (df_batting$H+df_batting$BB+df_batting$HBP)/(df_batting$AB+df_batting$BB+df_batting$HBP) df_batting[&#39;SAC&#39;] &lt;- df_batting$SH+df_batting$SF df_batting &lt;- df_batting %&gt;% select(playerID, name, hits, AVG, SLG, OBA, G, AB, R, H, RBI, `2B`, `3B`, HR, SAC, SB, CS, SO, BB, HBP, TB) %&gt;% arrange(playerID) # create file # write_csv(df_batting, &#39;data/real/RealBatting.csv&#39;) ## pitching data clean up df_pitching[&#39;ERA&#39;] &lt;- df_pitching$earned_run_avg df_pitching[&#39;AVG_against&#39;] &lt;- df_pitching$H/(df_pitching$H+3*df_pitching$IP) df_pitching &lt;- df_pitching %&gt;% select(playerID, name, throws, ERA, W, L, SV, AVG_against, G, GS, CG, IP, ER, H, SO, BB, HBP, WP, BK) %&gt;% arrange(playerID) # create file # write_csv(df_pitching, &#39;data/real/RealPitching.csv&#39;) #defining dataframes rhdf &lt;- read_csv(&#39;data/real/RealBatting.csv&#39;) rpdf &lt;- read_csv(&#39;data/real/RealPitching.csv&#39;) ghdf &lt;- read_csv(&#39;data/game/GameBatting.csv&#39;) gpdf &lt;- read_csv(&#39;data/game/GamePitching.csv&#39;) #preparing to create new dataframe with both real and game data #batting/hitting data ghdf[is.na(ghdf)] &lt;- 0 rhdf[is.na(rhdf)] &lt;- 0 rhdf$GameAB = ghdf$AB rhdf$GameH = ghdf$H rhdf$GameTB = ghdf$TB rhdf$GameG = ghdf$G rhdf$GameR = ghdf$R rhdf$GameRBI = ghdf$RBI rhdf$Game2B = ghdf$&quot;2B&quot; rhdf$Game3B = ghdf$&quot;3B&quot; rhdf$GameHR = ghdf$HR rhdf$GameSB = ghdf$SB #only want to work with this condition rhdf2 &lt;- rhdf %&gt;% filter(GameAB &gt; 0 &amp; AB &gt; 0) #new columns added rhdf2$H_should_have = rhdf2$AVG * rhdf2$GameAB rhdf2$TB_should_have = rhdf2$SLG * rhdf2$GameAB rhdf2$R_should_have = rhdf2$R / rhdf2$G * rhdf2$GameG rhdf2$RBI_should_have = rhdf2$RBI / rhdf2$G * rhdf2$GameG rhdf2$&quot;2B_should_have&quot; = rhdf2$&quot;2B&quot; / rhdf2$AB * rhdf2$GameAB rhdf2$&quot;3B_should_have&quot; = rhdf2$&quot;3B&quot; / rhdf2$AB * rhdf2$GameAB rhdf2$HR_should_have = rhdf2$HR / rhdf2$AB * rhdf2$GameAB rhdf2$SB_should_have = rhdf2$SB / rhdf2$G * rhdf2$GameG rhdf2$H_deviation = rhdf2$GameH - rhdf2$H_should_have rhdf2$TB_deviation = rhdf2$GameTB - rhdf2$TB_should_have rhdf2$R_deviation = rhdf2$GameR - rhdf2$R_should_have rhdf2$RBI_deviation = rhdf2$GameRBI - rhdf2$RBI_should_have rhdf2$&quot;2B_deviation&quot; = rhdf2$Game2B - rhdf2$&quot;2B_should_have&quot; rhdf2$&quot;3B_deviation&quot; = rhdf2$Game3B - rhdf2$&quot;3B_should_have&quot; rhdf2$HR_deviation = rhdf2$GameHR - rhdf2$HR_should_have rhdf2$SB_deviation = rhdf2$GameSB - rhdf2$SB_should_have #added new combined dataframe to files #write_csv(rhdf2, &#39;data/combined/Batting.csv&#39;) #pitching data gpdf[is.na(gpdf)] &lt;- 0 rpdf[is.na(rpdf)] &lt;- 0 rpdf$GameG = gpdf$G rpdf$GameIP = gpdf$IP rpdf$GameER = gpdf$ER rpdf$GameHits = gpdf$Hits rpdf$GameSO = gpdf$SO rpdf$GameW = gpdf$Wins rpdf$GameL = gpdf$Losses rpdf$GameSV = gpdf$Saves rpdf$GameBB = gpdf$BB #new columns added rpdf$ER_should_have = rpdf$ERA * rpdf$GameIP / 9 rpdf$Hits_should_have = rpdf$H / rpdf$IP * rpdf$GameIP rpdf$SO_should_have = rpdf$SO / rpdf$IP * rpdf$GameIP rpdf$W_should_have = rpdf$W / rpdf$G * rpdf$GameG rpdf$L_should_have = rpdf$L / rpdf$G * rpdf$GameG rpdf$SV_should_have = rpdf$SV / rpdf$G * rpdf$GameG rpdf$BB_should_have = rpdf$BB / rpdf$IP * rpdf$GameIP rpdf$ER_deviation = rpdf$GameER - rpdf$ER_should_have rpdf$Hits_deviation = rpdf$GameHits - rpdf$Hits_should_have rpdf$SO_deviation = rpdf$GameSO - rpdf$SO_should_have rpdf$W_deviation = rpdf$GameW - rpdf$W_should_have rpdf$L_deviation = rpdf$GameL - rpdf$L_should_have rpdf$SV_deviation = rpdf$GameSV - rpdf$SV_should_have rpdf$BB_deviation = rpdf$GameBB - rpdf$BB_should_have #added new combined dataframe to files #write_csv(rpdf, &#39;data/combined/Pitching.csv&#39;) "],["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values Missing values can complicate data exploration, therefore our aim is to find and remove them. #working with both combined data sets #read both data files combh &lt;- read_csv(&quot;data/combined/Batting.csv&quot;) combp &lt;- read_csv(&quot;data/combined/Pitching.csv&quot;) #number of NA&#39;s in data colSums(is.na(combh)) ## playerID name hits AVG SLG ## 0 0 0 0 0 ## OBA G AB R H ## 0 0 0 0 0 ## RBI 2B 3B HR SAC ## 0 0 0 0 0 ## SB CS SO BB HBP ## 0 0 0 0 0 ## TB GameAB GameH GameTB GameG ## 0 0 0 0 0 ## GameR GameRBI Game2B Game3B GameHR ## 0 0 0 0 0 ## GameSB H_should_have TB_should_have R_should_have RBI_should_have ## 0 0 0 0 0 ## 2B_should_have 3B_should_have HR_should_have SB_should_have H_deviation ## 0 0 0 0 0 ## TB_deviation R_deviation RBI_deviation 2B_deviation 3B_deviation ## 0 0 0 0 0 ## HR_deviation SB_deviation ## 0 0 colSums(is.na(combp)) ## playerID name throws ERA ## 0 0 0 0 ## W L SV AVG_against ## 0 0 0 0 ## G GS CG IP ## 0 0 0 0 ## ER H SO BB ## 0 0 0 0 ## HBP WP BK GameG ## 0 0 0 0 ## GameIP GameER GameHits GameSO ## 0 0 0 0 ## GameW GameL GameSV GameBB ## 0 0 0 0 ## ER_should_have Hits_should_have SO_should_have W_should_have ## 0 0 0 0 ## L_should_have SV_should_have BB_should_have ER_deviation ## 0 0 0 0 ## Hits_deviation SO_deviation W_deviation L_deviation ## 0 0 0 0 ## SV_deviation BB_deviation ## 0 0 We can see that there are no NA values in either of the data sets, hence there is no missing data. Plotting the two data sets asserts this. "],["results.html", "Chapter 5 Results", " Chapter 5 Results "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion "]]
