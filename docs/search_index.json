[["index.html", "YOUR TITLE HERE Chapter 1 Introduction", " YOUR TITLE HERE Barbara Bettencourt, Gregor Hanuschak, Zicheng Huang 2021-04-09 Chapter 1 Introduction APBA (American Professional Baseball Association) baseball is a baseball board game that has been played by hardcore baseball fans by decades. It touts itself as being extremely accurate and true-to-life. APBA makes cards for every major league baseball player for every season of major league baseball. These cards are based on real life statistics. You play the game by rolling dice and looking at the result on the cards (simplified description of the game). The game is accurate enough that adjustments are even made based on the particular baseball stadium you choose to play in (so similar numbers of homeruns should occur in each ballpark in the game as they do in real life). We have access to many scorecards of data from many times the board game was played (scorecards include how many at-bats players had in the game, how many hits they had, how many runs that pitchers gave up, etc.) Our project idea is to compare statistics of how players do in the game versus how they did in real life. As a simple example, if a player had 300 at-bats, and had 100 hits in real life then you would expect that the same player would have 50 hits in the game if he had 150 at-bats. We will see how close to reality the modeling actually is in APBA baseball. "],["data-sources.html", "Chapter 2 Data sources 2.1 Batting Table 2.2 Pitching Table", " Chapter 2 Data sources Our data sources are www.baseball-reference.com for the real-life statistics and approximately 100 games of scoresheets from APBA Baseball. In order to extract the data needed from Baseball Reference, we performed web scraping to pull the batting and pitching data in the year 1998 for the players that appear in the 100 games of APBA Baseball. First, we check if it is allowed to scrape the Baseball Reference website using the robotstxt package. paths_allowed(&#39;https://www.baseball-reference.com&#39;) ## [1] TRUE 2.1 Batting Table In order to obtain the real-life batting statistics for each individual player, we choose to scrape the Standard Batting table on the Baseball Reference website for each individual player. The entire list of players can be found in this folder. For example, the batting stats for Derek Jeter can be found at this link. Since we only want data for 1998 season, the row of Year 1998 in the Standard Batting table is our target. Using the rvest package, we can locate this particular row of data with html_nodes() by passing the condition xpath = '//*[@id=\"batting_standard.1998\"]/td'. The column names are stored in the html_attr('data-stat'), and the row values can be extracted using html_text(). 2.2 Pitching Table Similar to the Standard Batting table, we can extract the 1998 season pitching statistics from the Standard Pitching table. Below is an example of the Baseball Reference page for Mariano Rivera. This time, we can locate the row of pitching data with html_nodes() by passing the condition xpath = '//*[@id=\"pitching_standard.1998\"]/td'. The column names are stored in the html_attr('data-stat'), and the row values can be extracted using html_text(). After changing the numeric columns to the appropriate data type, we save the raw real-life batting and pitching data in this folder. "],["data-transformation.html", "Chapter 3 Data transformation 3.1 Web Scrapped Batting Table 3.2 Web Scrapped Pitching Table", " Chapter 3 Data transformation 3.1 Web Scrapped Batting Table We need to add the following calculated fields into the web scrapped batting data to better measure the performance of the hitters: \\(\\text{AVG}=\\dfrac{\\text{hits(H)}}{\\text{at bats(AB)}}\\) \\(\\text{SLG}=\\dfrac{\\text{first base(1B)}+\\text{second base(2B)}\\times2+\\text{third base(3B)}\\times3+\\text{home runs(HR)}\\times4}{\\text{at bats(AB)}}\\) \\(\\text{OBA}=\\dfrac{\\text{hits(H)}+\\text{bases on balls(BB)}+\\text{times hit by a pitch(HBP)}}{\\text{at bats(AB)}+\\text{bases on balls(BB)}+\\text{times hit by a pitch(HBP)}}\\) \\(\\text{SAC}=\\text{sacrifice hits(SH)}+\\text{sacrifice flies(SF)}\\) The resulting real-life batting table looks like: ## tibble [211 x 21] (S3: tbl_df/tbl/data.frame) ## $ playerID: chr [1:211] &quot;abbotku01&quot; &quot;abreubo01&quot; &quot;aguilri01&quot; &quot;alfoned01&quot; ... ## $ name : chr [1:211] &quot;Kurt Abbott&quot; &quot;Bobby Abreu&quot; &quot;Rick Aguilera&quot; &quot;Edgardo Alfonzo&quot; ... ## $ hits : chr [1:211] &quot;Right&quot; &quot;Left&quot; &quot;Right&quot; &quot;Right&quot; ... ## $ AVG : num [1:211] 0.263 0.312 NaN 0.278 0.274 ... ## $ SLG : num [1:211] 0.418 0.497 NaN 0.427 0.425 ... ## $ OBA : num [1:211] 0.312 0.411 NaN 0.357 0.375 ... ## $ G : num [1:211] 77 151 5 144 101 159 73 92 56 1 ... ## $ AB : num [1:211] 194 497 0 557 259 584 134 107 133 3 ... ## $ R : num [1:211] 26 68 0 94 51 104 25 7 17 0 ... ## $ H : num [1:211] 51 155 0 155 71 182 37 20 39 0 ... ## $ RBI : num [1:211] 24 74 0 78 33 124 4 10 16 0 ... ## $ 2B : num [1:211] 13 29 0 28 15 34 6 5 8 0 ... ## $ 3B : num [1:211] 1 6 0 2 3 5 0 0 0 0 ... ## $ HR : num [1:211] 5 17 0 17 6 38 1 1 1 0 ... ## $ SAC : num [1:211] 4 8 0 5 7 6 1 4 2 0 ... ## $ SB : num [1:211] 2 19 0 8 4 11 11 0 2 0 ... ## $ CS : num [1:211] 1 10 0 3 3 3 1 0 0 0 ... ## $ SO : num [1:211] 53 133 0 77 40 87 24 15 18 2 ... ## $ BB : num [1:211] 12 84 0 65 37 84 13 6 13 0 ... ## $ HBP : num [1:211] 2 0 0 3 5 5 1 0 1 0 ... ## $ TB : num [1:211] 81 247 0 238 110 340 46 28 50 0 ... 3.2 Web Scrapped Pitching Table Then we need to add the following calculated fields into the web scrapped pitching data to better measure the performance of the pitchers: \\(\\text{AVG_against}=\\dfrac{\\text{hits(H)}}{\\text{hits(H)}+\\text{innings pitched(IP)}\\times3}\\) The resulting real-life pitching table looks like: ## tibble [83 x 19] (S3: tbl_df/tbl/data.frame) ## $ playerID : chr [1:83] &quot;aguilri01&quot; &quot;arrojro01&quot; &quot;ashbyan01&quot; &quot;assenpa01&quot; ... ## $ name : chr [1:83] &quot;Rick Aguilera&quot; &quot;Rolando Arrojo&quot; &quot;Andy Ashby&quot; &quot;Paul Assenmacher&quot; ... ## $ throws : chr [1:83] &quot;Right&quot; &quot;Right&quot; &quot;Right&quot; &quot;Left&quot; ... ## $ ERA : num [1:83] 4.24 3.56 3.34 3.26 5.02 7.29 3.02 5.15 4.27 3.23 ... ## $ W : num [1:83] 4 14 17 2 10 1 3 3 14 4 ... ## $ L : num [1:83] 9 12 9 5 7 10 4 9 14 8 ... ## $ SV : num [1:83] 38 0 0 3 0 8 51 0 0 1 ... ## $ AVG_against: num [1:83] 0.252 0.243 0.247 0.277 0.257 ... ## $ G : num [1:83] 68 32 33 69 34 62 81 21 34 40 ... ## $ GS : num [1:83] 0 32 33 0 23 0 0 21 34 0 ... ## $ CG : num [1:83] 0 2 5 0 0 0 0 0 2 0 ... ## $ IP : num [1:83] 74.1 202 226.2 47 123.2 ... ## $ ER : num [1:83] 35 80 84 17 69 61 27 67 111 22 ... ## $ H : num [1:83] 75 195 223 54 128 100 86 126 247 46 ... ## $ SO : num [1:83] 57 152 151 43 57 68 81 113 130 57 ... ## $ BB : num [1:83] 15 65 58 19 64 26 20 63 73 28 ... ## $ HBP : num [1:83] 1 19 7 1 4 1 2 4 7 1 ... ## $ WP : num [1:83] 1 3 7 0 7 4 2 8 6 3 ... ## $ BK : num [1:83] 0 1 0 0 0 0 0 0 1 0 ... "],["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values Missing values can complicate data exploration, therefore our aim is to find and remove them. We use a R command that shows how many NA values are in each column of both the batting and pitching data. ## playerID name hits AVG SLG ## 0 0 0 0 0 ## OBA G AB R H ## 0 0 0 0 0 ## RBI 2B 3B HR SAC ## 0 0 0 0 0 ## SB CS SO BB HBP ## 0 0 0 0 0 ## TB GameAB GameH GameTB GameG ## 0 0 0 0 0 ## GameR GameRBI Game2B Game3B GameHR ## 0 0 0 0 0 ## GameSB H_should_have TB_should_have R_should_have RBI_should_have ## 0 0 0 0 0 ## 2B_should_have 3B_should_have HR_should_have SB_should_have H_deviation ## 0 0 0 0 0 ## TB_deviation R_deviation RBI_deviation 2B_deviation 3B_deviation ## 0 0 0 0 0 ## HR_deviation SB_deviation ## 0 0 ## playerID name throws ERA ## 0 0 0 0 ## W L SV AVG_against ## 0 0 0 0 ## G GS CG IP ## 0 0 0 0 ## ER H SO BB ## 0 0 0 0 ## HBP WP BK GameG ## 0 0 0 0 ## GameIP GameER GameHits GameSO ## 0 0 0 0 ## GameW GameL GameSV GameBB ## 0 0 0 0 ## ER_should_have Hits_should_have SO_should_have W_should_have ## 0 0 0 0 ## L_should_have SV_should_have BB_should_have ER_deviation ## 0 0 0 0 ## Hits_deviation SO_deviation W_deviation L_deviation ## 0 0 0 0 ## SV_deviation BB_deviation ## 0 0 We can see that there are no NA values in either of the data sets, hence there is no missing data. Plotting the two data sets asserts this. "],["results.html", "Chapter 5 Results", " Chapter 5 Results For each dominant hand there seems to exist similar gaps between hits but overall we can see that right-handed batters seem to gave the largest number of hits. However they also have a high number of batters having a small number of hits. We should note that in this data the number of right-handed batters is much bigger than the left and both-handed batters. In the real pitchers data we have the same issue as before, where we have more data on right-handed players then for left-handed players. Here we can see that the highest number of hits by a pitcher was obtained by a right-handed player. Here, it appears that a batter who is left-handed plays more games than any other batter on average. We can see that a batter who can bat with both hands has much better chances in being able to play a game, as all players who can bat with both hands have played a game. We should also note that the first quantile for the players who play with both hands is very high up compared to the left and right-handed people. Again this might be due to the difference of sample sizes. We can see that with pitchers, there is a huge difference in the number of wins depending on the players dominant hand. On average, it appears that a pitcher who is right-handed wins more games. Where the third quantile of the left-handed players is very close to the right-handed players median. "],["interactive-component.html", "Chapter 6 Interactive component", " Chapter 6 Interactive component "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion "]]
