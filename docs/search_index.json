[["index.html", "How well does the APBA baseball board game model reality? Chapter 1 Introduction", " How well does the APBA baseball board game model reality? Barbara Bettencourt, Gregor Hanuschak, Zicheng Huang 2021-04-11 Chapter 1 Introduction APBA (American Professional Baseball Association) baseball is a baseball board game that has been played by hardcore baseball fans for decades. It touts itself as being extremely accurate and true-to-life. APBA makes cards for every major league baseball player for every season of major league baseball. These cards are based on real life statistics. You play the game by rolling dice and looking at the result on the cards (simplified description of the game). The game is accurate enough that adjustments are even made for how well players do against left or right-handed pitchers and even the particular baseball stadium you choose to play in (so similar numbers of homeruns should occur in each ballpark in the game as they do in real life). We have access to many scoresheets of data from many times the board game was played (scorecards include how many at-bats players had in the game, how many hits they had, how many runs that pitchers gave up, etc.) Our project idea is to compare statistics of how players do in the game versus how they did in real life. As a simple example, if a player had 300 at-bats, and had 100 hits in real life then you would expect that the same player would have 50 hits in the game if he had 150 at-bats. We will see how close to reality the modeling actually is in APBA baseball. "],["data-sources.html", "Chapter 2 Data sources 2.1 Batting Table 2.2 Pitching Table", " Chapter 2 Data sources Our data sources are: - Scoresheets from approximately 100 games of APBA Baseball - Real-life statistics www.baseball-reference.com Above is a picture of an APBA baseball scoresheet. The top half of the scoresheet is dedicated to hitting. Left and right sides of the top half of the scoresheet show the starting lineups for the visiting and home teams respectively as well as any substitutes that came into the game. For each player, hitting statistics such as atbats, runs, hits, etc. are recorded whenever the player gets a chance to hit. Similarly, the bottom half of the scoresheet is dedicated to pitching. Using the statistics from about 100 of these scoresheets, we used Excel to create a spreadsheet to keep track of all the hitting and pitching statistics from all of the APBA baseball games. We had one tab in the spreadsheet for hitting and one tab in the spreadsheet for pitching. This was a bit of a painstaking process. For each scoresheet, we would look at each players name, find that players name in the Excel sheet (or add the players name to the Excel sheet if it wasnt there), increment each statistic in the Excel sheet with the players performance from the scoresheet, and repeat this process for every player in every scoresheet. In order to extract the data needed from Baseball Reference, we performed web scraping to pull the batting and pitching data in the year 1998 for the players that appear in the 100 games of APBA Baseball. First, we check if it is allowed to scrape the Baseball Reference website using the robotstxt package. paths_allowed(&#39;https://www.baseball-reference.com&#39;) ## [1] TRUE 2.1 Batting Table In order to obtain the real-life batting statistics for each individual player, we choose to scrape the Standard Batting table on the Baseball Reference website for each individual player. The entire list of players can be found in this folder. For example, the batting stats for Derek Jeter can be found at this link. Since we only want data for 1998 season, the row of Year 1998 in the Standard Batting table is our target. Using the rvest package, we can locate this particular row of data with html_nodes() by passing the condition xpath = '//*[@id=\"batting_standard.1998\"]/td'. The column names are stored in the html_attr('data-stat'), and the row values can be extracted using html_text(). 2.2 Pitching Table Similar to the Standard Batting table, we can extract the 1998 season pitching statistics from the Standard Pitching table. Below is an example of the Baseball Reference page for Mariano Rivera. This time, we can locate the row of pitching data with html_nodes() by passing the condition xpath = '//*[@id=\"pitching_standard.1998\"]/td'. The column names are stored in the html_attr('data-stat'), and the row values can be extracted using html_text(). After changing the numeric columns to the appropriate data type, we save the raw real-life batting and pitching data in this folder. "],["data-transformation.html", "Chapter 3 Data transformation 3.1 Web Scrapped Batting Table 3.2 Web Scrapped Pitching Table 3.3 Cleaning the Combined Data", " Chapter 3 Data transformation For our scoresheet data, when we were done tabulating all the statistics for all the players in Excel, we exported each tab into a CSV file and then read those CSV files into R Studio. We made one data frame to hold the hitting statistics and one data frame to hold the pitching statistics. There was some minor data cleanup to do for these data frames. There were many cells in Excel that were purposely left empty. For example, if a hitter never had a homerun in APBA baseball, that cell would have been left blank during the tabulation process, but the blank cell really represented a 0. When you import into R Studio from a CSV however, these blanks cells turn into NAs, so we needed to use R Studio commands to turn these NAs into the 0s they represent. 3.1 Web Scrapped Batting Table We need to add the following calculated fields into the web scrapped batting data to better measure the performance of the hitters: \\(\\text{AVG}=\\dfrac{\\text{hits(H)}}{\\text{at bats(AB)}}\\) \\(\\text{SLG}=\\dfrac{\\text{first base(1B)}+\\text{second base(2B)}\\times2+\\text{third base(3B)}\\times3+\\text{home runs(HR)}\\times4}{\\text{at bats(AB)}}\\) \\(\\text{OBA}=\\dfrac{\\text{hits(H)}+\\text{bases on balls(BB)}+\\text{times hit by a pitch(HBP)}}{\\text{at bats(AB)}+\\text{bases on balls(BB)}+\\text{times hit by a pitch(HBP)}}\\) \\(\\text{SAC}=\\text{sacrifice hits(SH)}+\\text{sacrifice flies(SF)}\\) The resulting real-life batting table looks like: ## tibble [211 x 21] (S3: tbl_df/tbl/data.frame) ## $ playerID: chr [1:211] &quot;abbotku01&quot; &quot;abreubo01&quot; &quot;aguilri01&quot; &quot;alfoned01&quot; ... ## $ name : chr [1:211] &quot;Kurt Abbott&quot; &quot;Bobby Abreu&quot; &quot;Rick Aguilera&quot; &quot;Edgardo Alfonzo&quot; ... ## $ hits : chr [1:211] &quot;Right&quot; &quot;Left&quot; &quot;Right&quot; &quot;Right&quot; ... ## $ AVG : num [1:211] 0.263 0.312 NaN 0.278 0.274 ... ## $ SLG : num [1:211] 0.418 0.497 NaN 0.427 0.425 ... ## $ OBA : num [1:211] 0.312 0.411 NaN 0.357 0.375 ... ## $ G : num [1:211] 77 151 5 144 101 159 73 92 56 1 ... ## $ AB : num [1:211] 194 497 0 557 259 584 134 107 133 3 ... ## $ R : num [1:211] 26 68 0 94 51 104 25 7 17 0 ... ## $ H : num [1:211] 51 155 0 155 71 182 37 20 39 0 ... ## $ RBI : num [1:211] 24 74 0 78 33 124 4 10 16 0 ... ## $ 2B : num [1:211] 13 29 0 28 15 34 6 5 8 0 ... ## $ 3B : num [1:211] 1 6 0 2 3 5 0 0 0 0 ... ## $ HR : num [1:211] 5 17 0 17 6 38 1 1 1 0 ... ## $ SAC : num [1:211] 4 8 0 5 7 6 1 4 2 0 ... ## $ SB : num [1:211] 2 19 0 8 4 11 11 0 2 0 ... ## $ CS : num [1:211] 1 10 0 3 3 3 1 0 0 0 ... ## $ SO : num [1:211] 53 133 0 77 40 87 24 15 18 2 ... ## $ BB : num [1:211] 12 84 0 65 37 84 13 6 13 0 ... ## $ HBP : num [1:211] 2 0 0 3 5 5 1 0 1 0 ... ## $ TB : num [1:211] 81 247 0 238 110 340 46 28 50 0 ... 3.2 Web Scrapped Pitching Table Then we need to add the following calculated fields into the web scrapped pitching data to better measure the performance of the pitchers: \\(\\text{AVG_against}=\\dfrac{\\text{hits(H)}}{\\text{hits(H)}+\\text{innings pitched(IP)}\\times3}\\) The resulting real-life pitching table looks like: ## tibble [83 x 19] (S3: tbl_df/tbl/data.frame) ## $ playerID : chr [1:83] &quot;aguilri01&quot; &quot;arrojro01&quot; &quot;ashbyan01&quot; &quot;assenpa01&quot; ... ## $ name : chr [1:83] &quot;Rick Aguilera&quot; &quot;Rolando Arrojo&quot; &quot;Andy Ashby&quot; &quot;Paul Assenmacher&quot; ... ## $ throws : chr [1:83] &quot;Right&quot; &quot;Right&quot; &quot;Right&quot; &quot;Left&quot; ... ## $ ERA : num [1:83] 4.24 3.56 3.34 3.26 5.02 7.29 3.02 5.15 4.27 3.23 ... ## $ W : num [1:83] 4 14 17 2 10 1 3 3 14 4 ... ## $ L : num [1:83] 9 12 9 5 7 10 4 9 14 8 ... ## $ SV : num [1:83] 38 0 0 3 0 8 51 0 0 1 ... ## $ AVG_against: num [1:83] 0.252 0.243 0.247 0.277 0.257 ... ## $ G : num [1:83] 68 32 33 69 34 62 81 21 34 40 ... ## $ GS : num [1:83] 0 32 33 0 23 0 0 21 34 0 ... ## $ CG : num [1:83] 0 2 5 0 0 0 0 0 2 0 ... ## $ IP : num [1:83] 74.1 202 226.2 47 123.2 ... ## $ ER : num [1:83] 35 80 84 17 69 61 27 67 111 22 ... ## $ H : num [1:83] 75 195 223 54 128 100 86 126 247 46 ... ## $ SO : num [1:83] 57 152 151 43 57 68 81 113 130 57 ... ## $ BB : num [1:83] 15 65 58 19 64 26 20 63 73 28 ... ## $ HBP : num [1:83] 1 19 7 1 4 1 2 4 7 1 ... ## $ WP : num [1:83] 1 3 7 0 7 4 2 8 6 3 ... ## $ BK : num [1:83] 0 1 0 0 0 0 0 0 1 0 ... 3.3 Cleaning the Combined Data Once real data was scraped into CSV files (again, one file for hitting and one for pitching), these were also put into their own data frames. We then consolidated the information from the game hitting and real hitting data frames into the same data frame such that every row in the consolidated hitting data frame had all the relevant information for the same player. For example, the first row of the hitting data frame had both game and real hitting data for Derek Jeter. We then proceeded to remove all players from the consolidated hitting data frame that had either 0 at-bats (AB) in the game or 0 AB in real life. For these players, we had no good way to analyze or evaluate how well APBA was representing them. For players with 0 AB in the game, there was nothing to compare against real life. In the game, these players were mainly relief pitchers. Relief pitchers do hit, but its rare, and such players didnt pitch in enough games to eventually get the chance to hit. For players with 0 AB in real life, there was nothing to compare game data to. In real life, these players were all pitchers in the American League since, in the American League, pitchers never hit and instead have another player designated to hit for them (a so-called designated hitter). Once these rows were removed from the consolidated hitting data frame, we looked at the remaining rows (each row representing a player) and proceeded to calculate how many of each interesting statistic the player should have had in the board game in order to be completely real-life accurate. Statistics we thought were interesting were hits (H), total bases (TB), runs (R), runs batted in (RBI), doubles (2B), triples (3B), homeruns (HR), and stolen bases (SB). Batting average (AVG) is a derived statistic equal to H / AB while slugging percentage (SLG) is a derived statistic equal to TB / AB. This means that AVG\\(\\times\\)AB = H and SLG\\(\\times\\)AB = TB, so, to get the number of H a player should have had in the game, we multiply his real-life AVG with the number of AB he had in the game. Similarly, to get the number of TB a player should have had in the game, we multiply his real-life SLG with the number of AB he had in the game. Heres the lines from our code that do this (where rhdf2 is our data frame): rhdf2$H_should_have = rhdf2$AVG * rhdf2$GameAB rhdf2$TB_should_have = rhdf2$SLG * rhdf2$GameAB We can make our own version of AVG and SLG for the other statistics, based on either AB or games played (G) as seemed appropriate (examples: (real-life doubles) / (real-life at-bats) and (real-life stolen bases) / (real-life games)). Once again, heres the lines from our code: rhdf2$R_should_have = rhdf2$R / rhdf2$G * rhdf2$GameG rhdf2$RBI_should_have = rhdf2$RBI / rhdf2$G * rhdf2$GameG rhdf2$&quot;2B_should_have&quot; = rhdf2$&quot;2B&quot; / rhdf2$AB * rhdf2$GameAB rhdf2$&quot;3B_should_have&quot; = rhdf2$&quot;3B&quot; / rhdf2$AB * rhdf2$GameAB rhdf2$HR_should_have = rhdf2$HR / rhdf2$AB * rhdf2$GameAB rhdf2$SB_should_have = rhdf2$SB / rhdf2$G * rhdf2$GameG Now, for each hitter, we have the expected number of H, TB, R, RBI, 2B, 3B, HR, and SB he should have had in the game and the actual number of H, TB, R, RBI, 2B, 3B, HR, and SB he had in the game. Therefore, we can find the deviation from reality for each of these statistics by taking the difference between game and expected versions as follows: rhdf2$H_deviation = rhdf2$GameH - rhdf2$H_should_have rhdf2$TB_deviation = rhdf2$GameTB - rhdf2$TB_should_have rhdf2$R_deviation = rhdf2$GameR - rhdf2$R_should_have rhdf2$RBI_deviation = rhdf2$GameRBI - rhdf2$RBI_should_have rhdf2$&quot;2B_deviation&quot; = rhdf2$Game2B - rhdf2$&quot;2B_should_have&quot; rhdf2$&quot;3B_deviation&quot; = rhdf2$Game3B - rhdf2$&quot;3B_should_have&quot; rhdf2$HR_deviation = rhdf2$GameHR - rhdf2$HR_should_have rhdf2$SB_deviation = rhdf2$GameSB - rhdf2$SB_should_have Now for pitchers, the entire process is quite similar. We consolidated the information from the game pitching and real pitching data frames into the same data frame such that every row in the consolidated data frame had all the relevant information for the same pitcher. For example, the first row of the pitching data frame had both game and real pitching data for Brian Bohanon. For pitchers, we look at the number of innings pitched (IP) or games pitched (G) in the game to determine how many of the other statistics pitchers should have. The standard baseball derived statistic, earned run average (ERA), can be used with IP to determine how many earned runs (ER) the player should have. Once again, we make up our own similarly derived statistics to determine how many of the other pitching statistics pitchers should have. Heres the lines from our code: rpdf$ER_should_have = rpdf$ERA * rpdf$GameIP / 9 rpdf$Hits_should_have = rpdf$H / rpdf$IP * rpdf$GameIP rpdf$SO_should_have = rpdf$SO / rpdf$IP * rpdf$GameIP rpdf$W_should_have = rpdf$W / rpdf$G * rpdf$GameG rpdf$L_should_have = rpdf$L / rpdf$G * rpdf$GameG rpdf$SV_should_have = rpdf$SV / rpdf$G * rpdf$GameG rpdf$BB_should_have = rpdf$BB / rpdf$IP * rpdf$GameIP And heres the lines from our code for calculating the deviation for each pitcher: rpdf$ER_deviation = rpdf$GameER - rpdf$ER_should_have rpdf$Hits_deviation = rpdf$GameHits - rpdf$Hits_should_have rpdf$SO_deviation = rpdf$GameSO - rpdf$SO_should_have rpdf$W_deviation = rpdf$GameW - rpdf$W_should_have rpdf$L_deviation = rpdf$GameL - rpdf$L_should_have rpdf$SV_deviation = rpdf$GameSV - rpdf$SV_should_have rpdf$BB_deviation = rpdf$GameBB - rpdf$BB_should_have "],["missing-values.html", "Chapter 4 Missing values", " Chapter 4 Missing values Missing values can complicate data exploration, therefore our aim is to find and remove them. After replacing the appropriate NAs with 0, we use an R command that shows how many NA values are in each column of both the batting and pitching data. ## playerID name hits AVG SLG ## 0 0 0 0 0 ## OBA G AB R H ## 0 0 0 0 0 ## RBI 2B 3B HR SAC ## 0 0 0 0 0 ## SB CS SO BB HBP ## 0 0 0 0 0 ## TB GameAB GameH GameTB GameG ## 0 0 0 0 0 ## GameR GameRBI Game2B Game3B GameHR ## 0 0 0 0 0 ## GameSB H_should_have TB_should_have R_should_have RBI_should_have ## 0 0 0 0 0 ## 2B_should_have 3B_should_have HR_should_have SB_should_have H_deviation ## 0 0 0 0 0 ## TB_deviation R_deviation RBI_deviation 2B_deviation 3B_deviation ## 0 0 0 0 0 ## HR_deviation SB_deviation ## 0 0 ## playerID name throws ERA ## 0 0 0 0 ## W L SV AVG_against ## 0 0 0 0 ## G GS CG IP ## 0 0 0 0 ## ER H SO BB ## 0 0 0 0 ## HBP WP BK GameG ## 0 0 0 0 ## GameIP GameER GameHits GameSO ## 0 0 0 0 ## GameW GameL GameSV GameBB ## 0 0 0 0 ## ER_should_have Hits_should_have SO_should_have W_should_have ## 0 0 0 0 ## L_should_have SV_should_have BB_should_have ER_deviation ## 0 0 0 0 ## Hits_deviation SO_deviation W_deviation L_deviation ## 0 0 0 0 ## SV_deviation BB_deviation ## 0 0 As expected, we see that there are no NA values in either of the data sets, hence there is no missing data. Plotting the two data sets asserts this. "],["results.html", "Chapter 5 Results", " Chapter 5 Results We proceed to explore the data by producing various plots. There are definitely some outliers, but for at least 50% of the players that were used in the board game, APBA does a great job at portraying them realistically. We know this because of the location and width of the box in the above box and whisker plot. The box represents 50% of the data and is nearly centered at 0, where 0 indicates no deviation from the number of hits a player should have (in other words, players with H_deviation = 0 had exactly the right number of hits in the APBA game). Furthermore, the box is very skinny, only a few hits wide. 50% of players in the game had between 2 hits too few and one hit too many in the game. Looking at the players representing the outliers, even some of these can be explained away. For example, for hitters that had more hits than expected, two of the top six (Andres Galarraga and Jorge Posada) hit inordinately well against left handed pitchers. For hitters that had fewer hits than expected, five of the worst eight (Rico Brogna, Bobby Abreu, Chipper Jones, Fernando Vina, and Edgar Renteria) hit inordinately badly against left handed pitchers. Further investigation is necessary, but it may be that left handed pitchers appeared more frequently than expected in the data set. This is possible since the data set had less than 300 players in it and there were more than 800 players that played in 1998 in real life. Once again, APBA did a great job at portraying hitters realistically; 50% of players are within a few total bases of their expected performance. Also, once again, the box plot is fairly well centered around 0 meaning about half the players did better than expected and half did worse than expected. Outliers are a bit more extreme here, but this should not be surprising. For example, if a player had one more homerun than expected, that is equivalent to 4 more total bases than expected. In other words, even slight deviations in extra base hits lead to a more noticeable TB deviation. Once again, further investigation is necessary, but it may be that outliers with many more total bases than expected represent players that played a disproprortionate number of games in ballparks that allow homeruns easily than they played in in real life. APBA takes the ballpark effects into account! For example, some ballparks have fences which are much closer to the batter than others making it easier to hit a home run in those ballparks. Also, Coors Field in Colorado (in which many of the APBA games were played) allows more homeruns than other ballpaks for another reason  the air is much thinner APBA seems to have done a good job with pitchers as well; 50% of pitchers in the game gave up within 5 earned runs of expected and, once again, the box is fairly well centered on 0 which means about half the pitchers did better than expected and half did worse than expected. Mark Portugal of the Phillies represents the biggest outlier. He gave up more than 13 runs more than expected in his outings. He was very unlucky for his manager in the APBA game! 50% of pitchers in the game gave up within 5 hits of what was expected and, once again, the box is fairly well centered on 0. The most extreme outlier on the plot represents Brian Bohanon. Looking at the plot you can see he allowed 18 hits less than expected! This seemed too extreme to believe, so we went back and looked at the scoresheets. Sure enough, there was a tabulation error  the value is incorrect. 50% of pitchers in the game had within a couple strikeouts of what was expected and, once again, the box is fairly well centered on 0. APBA continues to impress. The parallel coordinate plot above shows the deviations for each of the various hitting statistics. As a reminder, the deviation represents the players performance in the game  the players expected performance in the game. Youll note a fairly dark curve here indicating a great many players have about the same deviation for each statistic. This illustrates APBAs consistency. Looking at the similar parallel coordinate plot above for the deviations for each of the various pitching statistics, we again see a fairly dark curve illustrating consistency. Debatably one exception is in the number of walks that pitchers gave up  the pitchers seem to vary most widely from reality in this statistic compared to the others, and vary in a way which was less consistent compared to the other pitching statistics. It appears that SV_deviation is the most consistent of all the pitching statistics, but this is misleading. SV represents Saves which is a pitching statistic that only some relief pitchers accumulate. Most relief pitchers and ALL starting pitchers will have 0 saves in real life. For each dominant hand there seems to exist similar gaps between hits but overall we can see that right-handed batters seem to gave the largest number of hits. However they also have a high number of batters having a small number of hits. We should note that in this data the number of right-handed batters is much bigger than the left and both-handed batters. In the real pitchers data we have the same issue as before, where we have more data on right-handed players than for left-handed players. Here we can see that the highest number of hits by a pitcher was obtained by a right-handed player (Scott Erickson). Here, it appears that a batter who is left-handed plays more games than any other batter on average. We can see that a batter who can bat with both hands has much better chances in being able to play a game, as all players who can bat with both hands have played a game. We should also note that the first quantile for the players who play with both hands is very high up compared to the left and right-handed players. Again this might be due to the difference of sample sizes. We can see that with pitchers, there is a huge difference in the number of wins depending on the players dominant hand. On average, it appears that a pitcher who is right-handed wins more games. Where the third quantile of the left-handed players is very close to the right-handed players median. "],["interactive-component.html", "Chapter 6 Interactive component 6.1 ER Deviation by Left and Right-handed Pitchers", " Chapter 6 Interactive component 6.1 ER Deviation by Left and Right-handed Pitchers .tooltip { background-color: black; border: none; border-radius: 5px; padding: 15px; min-width: 400px; text-align: left; color: white; } For our interactive component, we wanted to see if APBA did a better job at modeling left-handed pitchers or right-handed pitchers. We chose earned runs given up (ER) as an example statistic and again looked at the ER deviation from what was expected. Also, we again chose to use box and whisker plots. We found that APBA did quite a bit better at modeling right-handed pitchers. This is evidenced by a smaller-width box which is much more centered on 0. It appears 50% of right-handed pitchers gave up within just a few ER of what was expected. Meanwhile, the box representing 50% of left-handed pitchers was not well centered on 0. Its possible our sample set had lots of players that hit left-handed pitchers well, but from the data we have, it appears APBA biases left-handed pitchers such that they often give up more runs than expected. Furthermore, not only is box not well centered, but it is also wide. This means the box representing 50% of left-handed pitchers includes pitchers that gave up as many as 10 runs more than expected! Note that we chose to make this interactive because we wanted to see immediately which pitchers over-performed or under-performed compared to what was expected. Hovering over points in the plots allows you to see exactly that. When you hover over a point and look below the plot (below the bottom axis label, you may have to zoom out), you see the name of the pitcher the point represents and the ER deviation of his performance compared to what is expected (positive or negative). We considered showing the pitcher name and ER deviation in the middle of the plot when you hover, but we didnt want to cover other points when showing the information. This plot was created with the aid of (ref). "],["conclusion.html", "Chapter 7 Conclusion", " Chapter 7 Conclusion At a macro level, we found that baseball players in the APBA baseball game consistently have near expected performance at least 50% of the time for every statistic tested. This holds true for both player hitting and player pitching, although it did particularly well for hitting. Along the way, we also learned that: 1.) left-handed batters tend to get in more games than right-handed batters 2.) that right-handed pitchers tend to get more wins on average than left-handed pitchers. The first fact could potentially be explained by the fact that there are more right-handed pitchers in baseball than left-handed pitchers and, further, that left-handed batters tend to hit better against these right-handed pitchers than right-handed batters do. Hence theres a lot of incentive to play the left-handed batters more often since a right-handed pitcher is often on the mound pitching. The second fact, however, about right-handers getting more wins on average, is quite unexpected and worth of further study. On a more micro level, we found that APBA did much better at emulating the performance of right-handed pitchers than left-handed pitchers. It is also worth further investigate to determine why that might be. "]]
